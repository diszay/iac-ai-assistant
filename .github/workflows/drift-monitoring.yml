name: Configuration Drift Monitoring

on:
  schedule:
    # Run every 15 minutes during business hours (UTC)
    - cron: '*/15 8-17 * * 1-5'
    # Run every hour outside business hours
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production
          - all
      force_baseline:
        description: 'Force create new baseline'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  drift-detection:
    name: 'Configuration Drift Detection'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [development, staging, production]
      fail-fast: false
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create Drift Report Directory
      run: |
        mkdir -p drift-reports/${{ matrix.environment }}
        mkdir -p baselines/${{ matrix.environment }}

    - name: Check Configuration Baseline
      id: baseline-check
      run: |
        echo "=== Checking Configuration Baseline ==="
        
        baseline_file="baselines/${{ matrix.environment }}/infrastructure_baseline.json"
        
        if [[ ! -f "$baseline_file" ]] || [[ "${{ github.event.inputs.force_baseline }}" == "true" ]]; then
          echo "baseline_exists=false" >> $GITHUB_OUTPUT
          echo "üîß Baseline not found or force update requested"
        else
          echo "baseline_exists=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Baseline exists: $baseline_file"
        fi

    - name: Create Infrastructure Baseline
      if: steps.baseline-check.outputs.baseline_exists == 'false'
      run: |
        echo "=== Creating Infrastructure Baseline ==="
        
        python -c "
        import json
        import time
        from datetime import datetime
        
        # Simulate baseline creation for ${{ matrix.environment }}
        print('üîß Creating infrastructure baseline for ${{ matrix.environment }}...')
        time.sleep(3)
        
        baseline = {
            'environment': '${{ matrix.environment }}',
            'created_at': datetime.utcnow().isoformat(),
            'version': '1.0.0',
            'infrastructure': {
                'vms': {
                    'web-server-01': {
                        'cpu': 4,
                        'memory': 8192,
                        'disk': 100,
                        'network': 'vmbr0',
                        'status': 'running'
                    },
                    'db-server-01': {
                        'cpu': 8, 
                        'memory': 16384,
                        'disk': 500,
                        'network': 'vmbr0',
                        'status': 'running'
                    }
                },
                'networks': {
                    'vmbr0': {
                        'type': 'bridge',
                        'subnet': '192.168.1.0/24',
                        'gateway': '192.168.1.1'
                    }
                },
                'storage': {
                    'local': {
                        'type': 'dir',
                        'path': '/var/lib/vz',
                        'available': 850.5,
                        'used': 149.5
                    }
                },
                'users': [
                    {'name': 'root', 'realm': 'pam', 'enabled': True},
                    {'name': 'admin', 'realm': 'pam', 'enabled': True}
                ]
            }
        }
        
        with open('baselines/${{ matrix.environment }}/infrastructure_baseline.json', 'w') as f:
            json.dump(baseline, f, indent=2)
        
        print('‚úÖ Baseline created successfully')
        "

    - name: Detect Configuration Drift
      id: drift-detection
      run: |
        echo "=== Detecting Configuration Drift ==="
        
        python -c "
        import json
        import random
        import time
        from datetime import datetime
        
        # Load baseline
        with open('baselines/${{ matrix.environment }}/infrastructure_baseline.json') as f:
            baseline = json.load(f)
        
        print(f'üîç Scanning ${{ matrix.environment }} for configuration drift...')
        time.sleep(2)
        
        # Simulate current infrastructure state
        current_state = baseline.copy()
        drift_detected = False
        drift_items = []
        
        # Simulate potential drift scenarios
        scenarios = [
            ('cpu_change', 'web-server-01 CPU changed from 4 to 6 cores'),
            ('memory_change', 'db-server-01 memory increased from 16GB to 20GB'),
            ('new_vm', 'Unauthorized VM test-server-01 detected'),
            ('user_change', 'New user backup-user added to system'),
            ('network_change', 'Network configuration modified on vmbr0')
        ]
        
        # Randomly simulate drift (30% chance)
        if random.random() < 0.3:
            drift_detected = True
            selected_drift = random.choice(scenarios)
            drift_items.append({
                'type': selected_drift[0],
                'description': selected_drift[1],
                'severity': random.choice(['low', 'medium', 'high']),
                'detected_at': datetime.utcnow().isoformat()
            })
        
        # Create drift report
        drift_report = {
            'environment': '${{ matrix.environment }}',
            'scan_time': datetime.utcnow().isoformat(),
            'baseline_version': baseline.get('version', '1.0.0'),
            'drift_detected': drift_detected,
            'drift_count': len(drift_items),
            'drift_items': drift_items,
            'scan_status': 'completed'
        }
        
        with open('drift-reports/${{ matrix.environment }}/drift_report.json', 'w') as f:
            json.dump(drift_report, f, indent=2)
        
        if drift_detected:
            print(f'üö® DRIFT DETECTED in ${{ matrix.environment }}!')
            for item in drift_items:
                print(f'  - {item[\"severity\"].upper()}: {item[\"description\"]}')
            print('drift_detected=true' >> '$GITHUB_OUTPUT')
        else:
            print(f'‚úÖ No configuration drift detected in ${{ matrix.environment }}')
            print('drift_detected=false' >> '$GITHUB_OUTPUT')
        "

    - name: Generate Drift Summary
      run: |
        echo "=== Drift Detection Summary ==="
        
        python -c "
        import json
        import os
        
        # Load drift report
        with open('drift-reports/${{ matrix.environment }}/drift_report.json') as f:
            report = json.load(f)
        
        print(f'Environment: {report[\"environment\"]}')
        print(f'Scan Time: {report[\"scan_time\"]}')
        print(f'Drift Detected: {report[\"drift_detected\"]}')
        print(f'Drift Items: {report[\"drift_count\"]}')
        
        if report['drift_detected']:
            print()
            print('Drift Details:')
            for item in report['drift_items']:
                print(f'  - [{item[\"severity\"].upper()}] {item[\"description\"]}')
        "

    - name: Upload Drift Reports
      uses: actions/upload-artifact@v3
      with:
        name: drift-reports-${{ matrix.environment }}-${{ github.run_id }}
        path: |
          drift-reports/${{ matrix.environment }}/
          baselines/${{ matrix.environment }}/

  analyze-drift:
    name: 'Analyze Drift Results'
    runs-on: ubuntu-latest
    needs: drift-detection
    if: always()
    
    steps:
    - name: Download All Drift Reports
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Analyze Combined Drift Results
      run: |
        echo "=== Combined Drift Analysis ==="
        
        python -c "
        import json
        import os
        import glob
        
        all_reports = []
        critical_drifts = []
        total_drift_count = 0
        
        # Find all drift report files
        for report_file in glob.glob('artifacts/*/drift-reports/*/drift_report.json'):
            try:
                with open(report_file) as f:
                    report = json.load(f)
                    all_reports.append(report)
                    
                    if report['drift_detected']:
                        total_drift_count += report['drift_count']
                        
                        # Check for critical drifts
                        for item in report['drift_items']:
                            if item['severity'] == 'high':
                                critical_drifts.append({
                                    'environment': report['environment'],
                                    'description': item['description'],
                                    'detected_at': item['detected_at']
                                })
            except Exception as e:
                print(f'Error reading {report_file}: {e}')
        
        print(f'üìä Total Environments Scanned: {len(all_reports)}')
        print(f'üìä Total Drift Items Found: {total_drift_count}')
        print(f'üö® Critical Drifts: {len(critical_drifts)}')
        
        if critical_drifts:
            print()
            print('Critical Drift Items:')
            for drift in critical_drifts:
                print(f'  - {drift[\"environment\"]}: {drift[\"description\"]}')
        
        # Set outputs for notification step
        with open('drift_summary.json', 'w') as f:
            json.dump({
                'total_environments': len(all_reports),
                'total_drift_count': total_drift_count,
                'critical_drifts': len(critical_drifts),
                'has_critical_drift': len(critical_drifts) > 0
            }, f)
        "

    - name: Create GitHub Issue for Critical Drift
      if: steps.analyze-drift.outputs.has_critical_drift == 'true'
      run: |
        echo "=== Creating GitHub Issue for Critical Drift ==="
        
        # In a real deployment, this would use GitHub API to create issues
        python -c "
        import json
        from datetime import datetime
        
        with open('drift_summary.json') as f:
            summary = json.load(f)
        
        if summary['has_critical_drift']:
            issue_body = f'''
## üö® Critical Configuration Drift Detected

**Detection Time:** {datetime.utcnow().isoformat()}
**Total Drift Items:** {summary['total_drift_count']}
**Critical Drifts:** {summary['critical_drifts']}

### Required Actions:
1. Review drift reports in workflow artifacts
2. Investigate unauthorized changes
3. Update baselines if changes are approved
4. Implement corrective actions for unauthorized changes

### Workflow Run:
- Run ID: ${{ github.run_id }}
- Triggered by: Configuration Drift Monitor
- Repository: ${{ github.repository }}

**Priority:** HIGH - Requires immediate attention
            '''
            
            print('GitHub Issue would be created with body:')
            print(issue_body)
        "

  notify:
    name: 'Drift Monitoring Notification'
    runs-on: ubuntu-latest
    needs: [drift-detection, analyze-drift]
    if: always()
    
    steps:
    - name: Drift Monitoring Summary
      run: |
        echo "=== Drift Monitoring Summary ==="
        echo "Repository: ${{ github.repository }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Scan Time: $(date -u)"
        
        if [[ "${{ needs.analyze-drift.result }}" == "success" ]]; then
          echo "‚úÖ Drift monitoring completed successfully"
        else
          echo "‚ùå Drift monitoring encountered issues"
        fi
        
        echo ""
        echo "View detailed results: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  cleanup:
    name: 'Cleanup Drift Monitoring'
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    
    steps:
    - name: Cleanup Temporary Files
      run: |
        echo "=== Cleaning up drift monitoring temporary files ==="
        # In production, this might clean up old drift reports
        echo "‚úÖ Cleanup completed"